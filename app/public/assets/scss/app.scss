@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;900&display=swap');

/** SCSS DARK THEME PRIMARY COLORS */
$primary: #5e8fff;

$primary-100: #e3e7ff;
$primary-200: #c6d0ff;
$primary-300: #a8baff;
$primary-400: #86a4ff;
$primary-500: #5e8fff;
$primary-600: #4d71c6;
$primary-700: #3c5491; 
$primary-800: #2c385f;
$primary-900: #1a1f31;

$dark-100: #0f0e14;
$dark-200: #16141c;
$dark-300: #181720;
$dark-400: #1b1a24;
$dark-500: #201f2d;
$dark-600: #262436;

$mixed-100: #20222f;
$mixed-200: #353743;
$mixed-300: #4b4c58;
$mixed-400: #62636e;
$mixed-500: #7b7b84;
$mixed-600: #94949c;

$light-100: #ffffff;
$light-200: #f7f7ff;
$light-300: #f0eeff;
$light-400: #e8e6ff;
$light-500: #e4e2ff;
$light-600: #e0deff;

// Button Colors

$success: #f0f0f0;
$light-success: #f0f0f0;
$warning: #f0f0f0;
$light-warning: #f0f0f0;
$danger: #f0f0f0;
$light-danger: #f0f0f0;

// Background Colors

$bg-light: #F0F0F0;
$bg-light-1: #f4f4f4;
$bg-light-2: #F9F9F9;
$bg-dark: #1c1c21;
$bg-dark-1: #141417;
$bg-dark-2: #111113;

$text-white: #ffffff;
$text-black: #171717;

html[data-theme="light"] {
    --color-text: #{$text-black};
    --color-background: #{$light-300};

    --color-nav-background: #{$light-100};
    --color-nav-hover: #{$light-200};

    --color-primary: #{$primary-500};
    --color-primary-hover: #{$primary-600};
    --color-primary-active: #{$primary-700};
    --color-text-primary: #{$text-white};
}

html[data-theme="dark"] {
    --color-text: #{$text-white};
    --color-background: #{$dark-100};

    --color-nav-background: #{$dark-200};
    --color-nav-hover: #{$dark-300};

    --color-primary: #{$primary-500};
    --color-primary-hover: #{$primary-600};
    --color-primary-active: #{$primary-700};
    --color-text-primary: #{$text-white};
}

body {
    background-color: var(--color-background);
    color: var(--color-text);

    font-family: 'Poppins', sans-serif;
}

// Breakpoints 

$breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
);

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (min-width: $breakpoint-value) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    }

    @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    }

    @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

        // Get the lower and upper breakpoints.
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);

        // Write the media query.
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

        // If one or both of the breakpoints don't exist.
    }

    @else {

        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower)==false) {

            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper)==false) {

            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}

* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;

    font-family: poppins;
}

// alignment utils

.align-items-start {
    align-items: start !important;
}

.align-items-center {
    align-items: center !important;
}

.align-items-end {
    align-items: end !important;
}

.justify-content-start {
    justify-content: start !important;
}

.justify-content-center {
    justify-content: center !important;
}

.justify-content-end {
    justify-content: end !important;
}

.justify-content-between {
    justify-content: space-between !important;
}

// end alignment utils

.d-flex {
    display: flex;
}

.flex-column {
    flex-direction: column;
}

.flex-column-reverse {
    flex-direction: column-reverse;
}

.flex-row {
    flex-direction: row;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.d-block {
    display: block !important;
}

.d-none {
    display: none !important;
}

//

.gap-1 {
    gap: .25rem;
}

.gap-2 {
    gap: .5rem;
}

.gap-3 {
    gap: 1rem;
}

.gap-4 {
    gap: 1.75rem;
}

.gap-5 {
    gap: 2.25rem;
}

//

html {
    height: 100%;
}

body {
    height: calc(100% - 3.5em);
}

section.main {
    margin-top: 3em;

    height: 100%;
    display: flex;
    flex-direction: column;

    gap: 1.75rem;
}

.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    height: 3.5em;
    font-size: .875rem;
    line-height: 1.2rem;
    left: 0;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 1.5rem;
    align-items: center;
    justify-content: space-between;

    z-index: 1060;

    background-color: var(--color-nav-background);

    &>ul {
        padding: 0;
        margin: 0;
        display: flex;
        gap: 1.5rem;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        height: 100%;
    }

    li>ul {
        padding: 0;
        margin: 0;
        display: flex;
        align-items: center;
        height: 100%;
        width: 100%;
    }

    li {
        height: 100%;
        display: inline-flex;
        align-items: center;
        width: 100%;
        flex: 1;
        justify-content: center;

        padding-inline: 1rem;

        &>a {
            height: 100%;
            display: inline-flex;
            align-items: center;
            gap: .5rem;
            padding-block: .5rem;
            padding-inline: 1rem;
            width: 100%;
        }

        &>a.profile {
            width: max-content;

            img {
                height: 100%;
                border-radius: 50%;
                object-fit: cover;
                width: auto;
            }
        }

        &>a:hover {
            background-color: var(--color-nav-hover);
            cursor: pointer;
        }
    }

    ul,
    li {
        list-style: none;
    }
}


/* Inline #3 | http://localhost:8081/login */

.form-control {
    font-size: .875rem;
    line-height: 1.2rem;
    border: none;
    padding: .5rem;
}

.btn {
    font-size: .875rem;
    line-height: 1.2rem;
    border: none;

    padding: .5rem;

    display: inline-flex;
    align-items: center;
    justify-content: center;

    transition: all .3s ease;
    font-weight: 600;
    border-radius: .1rem;

    &.btn-primary {
        background-color: var(--color-primary);
        color: var(--color-text-primary);
    }

    &.btn-primary:hover {
        cursor: pointer;
        background: var(--color-primary-hover);
    }

    &.btn-primary:active {
        cursor: pointer;
        background: var(--color-primary-active);
    }
}



@include respond-above(sm) {
    .teste {
        display: none;
    }
}